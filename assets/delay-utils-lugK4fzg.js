var s={};function M(){return(typeof process<"u"?s:void 0)?.NODE_ENV==="test"}async function i(n,e){await new Promise((t,o)=>{if(e?.aborted)return o(new DOMException("Aborted","AbortError"));const r=setTimeout(t,n),a=()=>{clearTimeout(r),o(new DOMException("Aborted","AbortError"))};e&&e.addEventListener("abort",a,{once:!0})})}function m(n){if(!n)return 0;if(typeof n=="number"){let a=Math.max(0,Math.floor(n));return a>5e3&&(console.warn(`[DelayUtils] Delay capped at 5000ms (requested: ${a}ms)`),a=5e3),a}let e=Math.max(0,Math.floor(n.min)),t=Math.max(e,Math.floor(n.max));if(e>5e3||t>5e3){const a={min:e,max:t};e=Math.min(e,5e3),t=Math.min(Math.max(e,t),5e3),console.warn(`[DelayUtils] Delay range capped to <= 5000ms (requested: min=${a.min}ms, max=${a.max}ms; capped: min=${e}ms, max=${t}ms)`)}const r=t-e;return r<=0?e:e+Math.floor(Math.random()*(r+1))}async function c(n,e){const t=m(n);t>0&&!M()&&await i(t,e)}export{c as a};
